package autoFactory;

/**
 * Это класс нашей топливной системы с именем autoFactory.FuelSystem.
 * <p>
 * Слово public означает то, что этот класс доступен из любого места кода внутри нашей программы.
 * <p>
 * Слово class означает то, что здесь происходит определение класса.
 * <p>
 * Слово implements означает то, что данный класс реализует или, иногда говорят, имплементирует
 * интерфейс autoFactory.IFuelSystem. Это значит, что клас обязан указать реализацию для каждого метода
 * из интерфейса autoFactory.IFuelSystem.
 */
public class FuelSystem implements IFuelSystem {

    /**
     * Это поле с именем tankVolume. Это поле служит для хранения значения объема бензобака созданного
     * объекта топливной системы.
     * <p>
     * Слово private означает, что мы не можем обратиться к нему напрямую из кода программы за
     * пределами данного класса.
     * <p>
     * Слово final означает, что значение данного поля устанавливается один раз в момент создания
     * объекта. И после того, как объект будет создан с определенным значением объема бензобака, это
     * значение у объекта изменить будет уже невозможно.
     * <p>
     * Слово int означает то, что данное поле хранит значение целого числа.
     */
    private final int tankVolume;
    /**
     * Это поле с именем currentFuelVolume. Это поле служит для хранения значения текущего уровня
     * топлива в бензобаке.
     * <p>
     * Слово private означает, что мы не можем обратиться к нему напрямую из кода программы за
     * пределами данного класса.
     * <p>
     * Заметьте, что здесь нет слова final, потому что данное значение может меняться в ходе жизни
     * объекта.
     * <p>
     * Мы сможем например заправлять бензобак через метод fillUpFuel и тем самым увеличивать значение
     * currentFuelVolume, а также сможем подавать топливо в двигатель через метод pushFuelToEngine и
     * тем самым уменьшать значение currentFuelVolume.
     * <p>
     * Слово int означает то, что данное поле хранит значение целого числа.
     */
    private int currentFuelVolume;

    /**
     * Это конструктор данного класса. Он вызывается для создания нового объекта топливной системы.
     * Конструктор позволяет описывать, дополнительную логику для момента создания объекта данного
     * класса. Как правило, это начальная инициализация значений полей.
     * <p>
     * Название конструктора всегда совпадает с названием самого класса. Именно этим он отличается
     * от методов. Методы не могут иметь такое же название, как и класс, иначе метод станет
     * конструктором.
     * <p>
     * Слово public означает то, что этот конструктор доступен из любого места кода внутри нашей
     * программы. То есть в любой части нашей программы мы можем создать объект топливной системы.
     * <p>
     * В скобках конструктора указываются параметры, которые конструктор принимает на вход при его
     * вызове. Как правило, это обязательные параметры объекта, без которых он не может быть создан.
     *
     * @param initialTankVolume параметр значения объема бензобака, которое передается в
     *                          конструктор в виде целого числа, о чем говорит указанный
     *                          тип int.
     */
    public FuelSystem(int initialTankVolume) {
        /*
         * Здесь мы устанавливаем пришедшее в конструктор желаемое значение объема бензобака
         * initialTankVolume в поле tankVolume создаваемого нами объекта.
         */
        tankVolume = initialTankVolume;

        /*
         * Здесь мы выводим в консоль сообщение о том, что был создан объект топливной системы
         */
        System.out.println("Создана топливная система объемом " + initialTankVolume + " л.");
    }

    /**
     * Это реализация метода с именем pushFuelToEngine. Этот метод служит для условной подачи
     * обозначенного при вызове метода объема топлива в двигатель автомобиля.
     * <p>
     * Слово public означает, что мы сможем обращаться к данному методу из любой точки нашей программы.
     * <p>
     * Слово boolean перед названием метода говорит о том, что данный метод возвращает
     * в ответ либо значение true (правда), либо false (ложь).
     * <p>
     * В скобках метода указываются параметры, которые метод принимает на вход при его вызове.
     *
     * @param fuelToBurnVolume параметр значения объема топлива, которое необходимо передать в двигатель
     *                         в виде целого числа, о чем говорит указанный тип int.
     * @return метод возвращает значение true, если топлива для отправки в двигатель
     * достаточно в бензобаке, метод возвращает false, если топлива в бензобаке недостаточно.
     */
    @Override
    public boolean pushFuelToEngine(int fuelToBurnVolume) {
        /*
         * С помощью представленной ниже конструкции вида if (если) - else (иначе) мы задаем следующее
         * поведение для данного метода.
         *
         * Если значение поля currentFuelVolume больше или равно значению fuelToBurnVolume, то есть
         * если в бензобаке осталось больше или ровно столько же топлива, сколько необходимо отдать в
         * двигатель, то мы уменьшаем значение текущего остатка топлива на объем, который необходимо
         * передать в двигатель и говорим методу вернуть в ответ значение true.
         *
         * В противном случае, если currentFuelVolume меньше fuelToBurnVolume, то есть если в
         * бензобаке осталось меньше топлива, чем необходимо отдать в двигатель, то уменьшения текущего
         * объема топлива не происходит, а метод сразу же возвращает false.
         */
        if (currentFuelVolume >= fuelToBurnVolume) {
            currentFuelVolume = currentFuelVolume - fuelToBurnVolume;
            return true;
        } else {
            return false;
        }
    }

    /**
     * Это реализация метода с именем fillUpFuel. Этот метод служит для пополнения топлива в бензобаке
     * на переданное при вызове метода количество.
     * <p>
     * Слово public означает, что мы сможем обращаться к данному методу из любой точки нашей программы.
     * <p>
     * Слово void перед названием метода говорит о том, что данный метод ничего не возвращает в ответ.
     * <p>
     * В скобках метода указываются параметры, которые метод принимает на вход при его вызове.
     *
     * @param fuelToFillUpVolume параметр значение объема топлива, которым заполняется
     *                           бензобак в виде целого числа, о чем говорит указанный
     *                           тип int.
     */
    @Override
    public void fillUpFuel(int fuelToFillUpVolume) {
        /*
         * В данной строке кода мы увеличиваем значение поля currentFuelVolume на значение
         * fuelToFillUpVolume.
         */

        if (tankVolume < fuelToFillUpVolume + currentFuelVolume){
            int overFuelVolume = tankVolume - fuelToFillUpVolume + currentFuelVolume;
            System.out.println(overFuelVolume + " л. топлива не поместилось в бензобак");
            currentFuelVolume = tankVolume;

        }else {
            currentFuelVolume = currentFuelVolume + fuelToFillUpVolume;
        }

        /*
         * В данной строке мы выводим в консоль звук пополнения бензобака, так как обычно
         * при пополнении бензобака слышно, как он пополняется.
         */
        System.out.println("Буль-буль-буль - слышен звук заливания бензина в бензобак");
    }

    /**
     * Это реализация метода с именем getCurrentFuelVolume. Этот метод служит для получения текущего
     * объема топлива в бензобаке.
     * <p>
     * Слово public означает, что мы сможем обращаться к данному методу из любой точки нашей программы.
     * <p>
     * Слово int перед названием метода говорит о том, что данный метод возвращает в ответ значение
     * текущего объема топлива в виде целого числа.
     *
     * @return данный метод возвращает целочисленное значение оставшегося объема топлива в бензобаке
     * топливной системы.
     */
    @Override
    public int getCurrentFuelVolume() {
        return currentFuelVolume;
    }
}
